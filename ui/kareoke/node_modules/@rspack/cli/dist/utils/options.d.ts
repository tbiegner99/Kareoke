import yargs from "yargs";
export declare const commonOptions: (yargs: yargs.Argv<{}>) => yargs.Argv<yargs.Omit<{}, "config" | "env" | "entry" | "watch" | "mode" | "devtool" | "output-path" | "node-env" | "configName"> & yargs.InferredOptionTypes<{
    config: {
        g: boolean;
        type: "string";
        describe: string;
        alias: string;
    };
    entry: {
        type: "array";
        string: true;
        describe: string;
    };
    "output-path": {
        type: "string";
        describe: string;
    };
    mode: {
        type: "string";
        describe: string;
    };
    watch: {
        type: "boolean";
        default: boolean;
        describe: string;
    };
    env: {
        type: "array";
        string: true;
        describe: string;
    };
    "node-env": {
        string: true;
        describe: string;
    };
    devtool: {
        type: "boolean";
        default: boolean;
        describe: string;
    };
    configName: {
        type: "array";
        string: true;
        describe: string;
    };
}>>;
export declare const previewOptions: (yargs: yargs.Argv<{}>) => yargs.Argv<yargs.Omit<{
    dir: string | undefined;
}, "config" | "host" | "port" | "open" | "server" | "publicPath" | "configName"> & yargs.InferredOptionTypes<{
    publicPath: {
        type: "string";
        describe: string;
    };
    config: {
        g: boolean;
        type: "string";
        describe: string;
        alias: string;
    };
    port: {
        type: "number";
        describe: string;
    };
    host: {
        type: "string";
        describe: string;
    };
    open: {
        type: "boolean";
        describe: string;
    };
    server: {
        type: "string";
        describe: string;
    };
    configName: {
        type: "array";
        string: true;
        describe: string;
    };
}>>;
export declare function normalizeEnv(argv: yargs.Arguments): void;
