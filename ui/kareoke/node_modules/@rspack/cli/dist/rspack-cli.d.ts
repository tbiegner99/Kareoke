import yargs from "yargs";
import { RspackBuildCLIOptions, RspackCLIColors, RspackCLILogger, RspackCLIOptions } from "./types";
import { RspackOptions, MultiCompiler, MultiRspackOptions, Stats, MultiStats, Compiler } from "@rspack/core";
import type { RspackPluginInstance, RspackPluginFunction } from "@rspack/core";
type Command = "serve" | "build";
export declare class RspackCLI {
    colors: RspackCLIColors;
    program: yargs.Argv;
    constructor();
    createCompiler(options: RspackBuildCLIOptions, rspackCommand: Command, callback?: (e: Error | null, res?: Stats | MultiStats) => void): Promise<Compiler | MultiCompiler | null>;
    createColors(useColor?: boolean): RspackCLIColors;
    getLogger(): RspackCLILogger;
    run(argv: string[]): Promise<void>;
    registerCommands(): Promise<void>;
    buildConfig(item: RspackOptions | MultiRspackOptions, options: RspackBuildCLIOptions, command: Command): Promise<RspackOptions | MultiRspackOptions>;
    loadConfig(options: RspackCLIOptions): Promise<RspackOptions | MultiRspackOptions>;
    isMultipleCompiler(compiler: Compiler | MultiCompiler): compiler is MultiCompiler;
    isWatch(compiler: Compiler | MultiCompiler): boolean;
}
export declare function defineConfig(config: RspackOptions): RspackOptions;
export declare function definePlugin(plugin: RspackPluginFunction): RspackPluginFunction;
export declare function definePlugin(plugin: RspackPluginInstance): RspackPluginInstance;
export {};
