"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewCommand = void 0;
const dev_server_1 = require("@rspack/dev-server");
const options_1 = require("../utils/options");
const core_1 = require("@rspack/core");
const path_1 = __importDefault(require("path"));
const defaultRoot = "dist";
class PreviewCommand {
    async apply(cli) {
        cli.program.command(["preview [dir]", "preview", "p"], "run the rspack server for build output", options_1.previewOptions, async (options) => {
            // config、configName are necessary for loadConfig
            const rspackOptions = {
                config: options.config,
                configName: options.configName,
                argv: {
                    ...options
                }
            };
            let config = await cli.loadConfig(rspackOptions);
            config = await getPreviewConfig(config, options);
            if (!Array.isArray(config)) {
                config = [config];
            }
            config = config;
            // find the possible devServer config
            config = config.find(item => item.devServer) || config[0];
            const devServerOptions = config.devServer;
            const compiler = (0, core_1.rspack)({ entry: {} });
            if (!compiler)
                return;
            try {
                const server = new dev_server_1.RspackDevServer(devServerOptions, compiler);
                await server.start();
            }
            catch (error) {
                const logger = cli.getLogger();
                logger.error(error);
                process.exit(2);
            }
        });
    }
}
exports.PreviewCommand = PreviewCommand;
// get the devServerOptions from the config
async function getPreviewConfig(item, options) {
    const internalPreviewConfig = async (item) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        // all of the options that a preview static server needs(maybe not all)
        item.devServer = {
            static: {
                directory: options.dir
                    ? path_1.default.join((_a = item.context) !== null && _a !== void 0 ? _a : process.cwd(), options.dir)
                    : (_c = (_b = item.output) === null || _b === void 0 ? void 0 : _b.path) !== null && _c !== void 0 ? _c : path_1.default.join((_d = item.context) !== null && _d !== void 0 ? _d : process.cwd(), defaultRoot),
                publicPath: (_e = options.publicPath) !== null && _e !== void 0 ? _e : "/"
            },
            port: (_f = options.port) !== null && _f !== void 0 ? _f : 8080,
            proxy: (_g = item.devServer) === null || _g === void 0 ? void 0 : _g.proxy,
            host: (_h = options.host) !== null && _h !== void 0 ? _h : (_j = item.devServer) === null || _j === void 0 ? void 0 : _j.host,
            open: (_k = options.open) !== null && _k !== void 0 ? _k : (_l = item.devServer) === null || _l === void 0 ? void 0 : _l.open,
            server: (_m = options.server) !== null && _m !== void 0 ? _m : (_o = item.devServer) === null || _o === void 0 ? void 0 : _o.server,
            historyApiFallback: (_p = item.devServer) === null || _p === void 0 ? void 0 : _p.historyApiFallback
        };
        return item;
    };
    if (Array.isArray(item)) {
        return Promise.all(item.map(internalPreviewConfig));
    }
    else {
        return internalPreviewConfig(item);
    }
}
